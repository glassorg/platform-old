import .math.Color
import .math.Vector2
import .math.Vector3
import .math.Matrix4
import .Graphics
import .GL.*
import ..utility.common
    memoize
import .VertexElement
import .VertexBuffer
import .VertexStream
import .functions
    createShader
    createProgram
    createTexture
import .DataStream
import .DataBuffer
    BufferUsage
import .VertexShader
import .FragmentShader
import .Program
import .Uniforms
    createUniforms
    setUniform
import .Texture
import .TextureBase
import .IndexStream
import .IndexBuffer
import .InstanceStream
import .InstanceBuffer

export default class Graphics3D extends Graphics

    gl: WebGL2RenderingContext
    uniforms: Uniforms

    getWebGLVertexShader: (shader: VertexShader) => WebGLShader
    getWebGLFragmentShader: (shader: FragmentShader) => WebGLShader
    getWebGLProgram: (program: Program) => WebGLProgram
    getWebGLTexture: (name: String) => WebGLTexture
    getDataBuffer: (factory: (g: Graphics3D) => DataBuffer) => DataBuffer

    vertexStream: VertexStream
    indexStream: IndexStream
    instanceStream: InstanceStream
    // [private]
    boundTextureUnits: Array<WebGLTexture> = []

    constructor(gl) ->
        super()
        this.gl = gl
        this.uniforms = createUniforms(gl, this.flush.bind(this))
        this.getWebGLVertexShader = memoize()
            (shader: VertexShader) =>
                return createShader(this.gl, GL.VERTEX_SHADER, shader.source)
        this.getWebGLFragmentShader = memoize()
            (shader: FragmentShader) =>
                return createShader(this.gl, GL.FRAGMENT_SHADER, shader.source)
        this.getWebGLProgram = memoize()
            (program: Program) =>
                let vs = this.getWebGLVertexShader(program.vertexShader)
                let fs = this.getWebGLFragmentShader(program.fragmentShader)
                return createProgram(this.gl, vs, fs)
        this.getWebGLTexture = memoize()
            (name: String) =>
                return
                    createTexture(this.gl, name, () => this.invalidate())
        let getUniformDependencies = this.getUniformDependencies
        this.getUniformDependencies = memoize((program: Program) => getUniformDependencies.call(this, program))
        this.getDataBuffer = memoize(factory => factory(this))

        let initialProgram = Program.default3D
        this.vertexStream = new VertexStream()
            new VertexBuffer(this, BufferUsage.streamDraw, initialProgram.vertexShader.vertexFormat)
        this.indexStream = new IndexStream()
            new IndexBuffer(this, BufferUsage.streamDraw, initialProgram.vertexShader.vertexFormat)
        this.instanceStream = new InstanceStream()
            new InstanceBuffer(this, BufferUsage.streamDraw, initialProgram.vertexShader.vertexFormat, null)
        this.program = initialProgram

        gl.enable(GL.BLEND)
        gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA)
        gl.enable(GL.DEPTH_TEST)
        gl.depthFunc(GL.LEQUAL)
        gl.enable(GL.CULL_FACE)
        gl.cullFace(GL.BACK)

        // this.updateScreenSize()

    invalidate() ->
        this.gl.canvas.dirty = true

    //  [private]
    //  { [name: String]: Texture}
    //  TODO: Convert this to a Map or something better typed.
    cachedTextures = {}
    createTexture(id: String, glTextureOrSrc: WebGLTexture | String = id, width?: Number, height?: Number) ->
        //  we cache IF the id is the same as the name
        let cache = id == glTextureOrSrc
        let texture = cache ? this.cachedTextures[id] : null
        if texture is Null
            texture = new Texture(this.gl, id, glTextureOrSrc, width, height)
            if cache
                this.cachedTextures[id] = texture
        return texture

    //  { [name: String]: Number }
    boundLocations = {}
    getTextureUnitByUniformName(name: String) ->
        // each uniform name will end up with it's own unique texture unit
        var location = this.boundLocations[name]
        if location is Null
            location = this.boundLocations[name] = Object.keys(this.boundLocations).length
        return location

    bindTexture(texture: WebGLTexture, name): Number ->
        let unit = this.getTextureUnitByUniformName(name)
        this.boundTextureUnits[unit] = texture
        this.gl.activeTexture(GL.TEXTURE0 + unit)
        this.gl.bindTexture(GL.TEXTURE_2D, texture)
        return unit

    updateScreenSize() ->
        let { width, height } = this.gl.canvas
        this.uniforms.screen = new Vector2(width, height)

    get width() -> this.gl.canvas.width
    get height() -> this.gl.canvas.height
    set transform(m: Matrix4) ->
        if m isnt Matrix4
            throw new Error("transform must be a Matrix4")
        this.uniforms.modelView = m
    get transform() -> this.uniforms.modelView

    clear(color: Color = Color.transparent, depth = 1) ->
        let { gl } = this
        gl.clearColor(color.red, color.green, color.blue, color.alpha)
        gl.clearDepth(depth)
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

    begin() ->
        this.uniforms.model = Matrix4.identity
        this.uniforms.view = Matrix4.identity
        this.uniforms.projection = Matrix4.identity

    end() ->
        this.flush()

    bindAttributes(vertexBuffers: Array<VertexBuffer>) ->
        let gl = this.gl
        let program = this.getWebGLProgram(this.program)
        //  automatically set vertex attribute pointers
        //  this will only work if the name of the attributes
        //  within the vertex shader is the same as the name of elements in the vertex format
        let count = this.gl.getProgramParameter(program, GL.ACTIVE_ATTRIBUTES)
        for i in 0..count
            let attribute = gl.getActiveAttrib(program, i)
            let location = gl.getAttribLocation(program, attribute.name)
            // find the buffer that stores this attribute
            var element: VertexElement | Undefined
            var elementBuffer: VertexBuffer | Undefined
            for vertexBuffer in vertexBuffers
                element = vertexBuffer.vertexFormat.elements[attribute.name]
                if element isnt Null
                    elementBuffer = vertexBuffer
                    break
            if element is Null || elementBuffer is Null
                throw new Error(`VertexElement not found: ${attribute.name}`)
            elementBuffer.bind()
            gl.enableVertexAttribArray(location)
            gl.vertexAttribPointer(location, element.size, element.type, element.normalize, element.stride, element.offset)
            //  divisor is used for instanced rendering
            gl.vertexAttribDivisor(location, elementBuffer.vertexDivisor)

    bindUniforms() ->
        let gl = this.gl
        let program = this.getWebGLProgram(this.program)
        //  automatically set vertex attribute pointers
        //  this will only work if the name of the attributes
        //  within the vertex shader is the same as the name of elements in the vertex format
        let count = this.gl.getProgramParameter(program, GL.ACTIVE_UNIFORMS)
        for i in 0..count
            let attribute = gl.getActiveUniform(program, i)
            let location = gl.getUniformLocation(program, attribute.name)
            var value = this.uniforms[attribute.name]
            if value?.toArray
                value = value.toArray()
            // set uniform value, need abstraction for writing uniforms
            setUniform(this, attribute, location, value)

    getUniformDependencies(program: Program) ->
        //  { [name: String]: boolean }
        let deps = {}
        let gl = this.gl
        let glProgram = this.getWebGLProgram(program)
        let count = this.gl.getProgramParameter(glProgram, GL.ACTIVE_UNIFORMS)
        for i in 0..count
            let {name} = gl.getActiveUniform(glProgram, i)
            if name == "modelViewProjection"
                deps.modelView = true
                deps.projection = true
            else
                deps[name] = true
        return deps

    fillRectangle(x: Number, y: Number, width: Number, height: Number, color: Color, texture: TextureBase | String = Texture.default, depth: Number = -1) ->
        let a = new Vector3(x, y, depth).transform(this.uniforms.modelView)
        let b = new Vector3(x + width, y, depth).transform(this.uniforms.modelView)
        let c = new Vector3(x, y + height, depth).transform(this.uniforms.modelView)
        let d = new Vector3(x + width, y + height, depth).transform(this.uniforms.modelView)
        let uv = texture is String ? Texture.defaultUV : texture
        this.uniforms.colorTexture = texture
        this.indexStream.writeQuads()
            []
                ...a, ...color, uv.left, uv.top
                ...c, ...color, uv.left, uv.bottom
                ...b, ...color, uv.right, uv.top
                ...d, ...color, uv.right, uv.bottom

    _program: Program
    get program() -> this._program
    set program(value: Program) ->
        if this._program != value
            this.flush()
            this._program = value
            this.gl.useProgram(this.getWebGLProgram(value))
            let isInstancedShader = value.vertexShader.vertexFormats.length > 1
            if isInstancedShader
                this.instanceStream.vertexFormat = value.vertexShader.vertexFormat
            else
                this.indexStream.vertexFormat = value.vertexShader.vertexFormat
                this.vertexStream.vertexFormat = value.vertexShader.vertexFormat

    flush(property?: String | Null) ->
        //  if a uniform property changes, but the current program doesn't care then we don't flush.
        if property is Null || this.getUniformDependencies(this.program)[property]
            this.vertexStream.flush()
            this.indexStream.flush()
            this.instanceStream.flush()

    write(...components: Array<Number>) -> this.vertexStream.write(components)
