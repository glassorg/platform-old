// TODO: Fix this to NOT auto import when there are children?
import .functions
    as graphicsFunctions
    transfer
import .GL.*
import .VertexFormat
import .VertexElement
import .math.Vector3
import .math.Vector2
import .math.Vector4
import .math.functions
    as mathFunctions
    lerp

// TODO: handle new: type Constructor<T> = new (...values: Number[]) => T
type Constructor = Function

export default class VertexArray

    format: VertexFormat
    floatData: Float32Array
    uintData: Uint32Array
    _length = 0

    constructor(format: VertexFormat, capacity = 256) ->
        this.format = format
        this.setCapacity(capacity)

    get length() -> this._length

    get buffer() -> this.floatData?.buffer

    ensureCapacity(capacity: Number) ->
        if this.capacity < capacity
            this.grow(capacity)

    setMinLength(length: Number) ->
        this.ensureCapacity(length)
        this._length = Math.max(this._length, length)

    get capacity() ->
        let buffer = this.buffer
        if buffer is Null
            return 0
        return buffer.byteLength / this.format.size

    grow(minimum = 0) ->
        this.setCapacity(Math.max(minimum, this.capacity * 2))

    setCapacity(capacity: Number) ->
        if capacity != this.capacity
            let newSize = capacity * this.format.size
            let buffer = this.buffer ? transfer(this.buffer, newSize) : new ArrayBuffer(newSize)
            this.floatData = new Float32Array(buffer)
            this.uintData = new Uint32Array(buffer)

    getElement(name: String) ->
        let element = this.format.elements[name]
        if element is Null
            throw new Error(`Element attribute not found: ${name}`)
        return element

    //  adds a new interpolated vertex and returns its index
    addInterpolatedVertex(): Number
        vertexIndexA: Number
        vertexIndexB: Number
        alpha = 0.5
        ->
        let vertexIndexC = this.length
        for element in this.format.elements
            let a = this.get(vertexIndexA, element.name)
            let b = this.get(vertexIndexB, element.name)
            let c = lerp(a, b, alpha)
            this.set(vertexIndexC, element.name, c)
        return vertexIndexC

    forEach(attribute: String, type, callback: (value, index: Number) => Void) ->
        for i in 0 .. this.length
            let value = this.get(i, attribute, type ?? undefined)
            callback(value, i)

    filter(attribute: String, type, fn: (value, index: Number) => Any) ->
        this.forEach(attribute, type)
            (value, i) =>
                this.set(i, attribute, fn(value, i))

    get(vertexIndex: Number, attributeName: String, type) ->
        let element = this.getElement(attributeName)
        let elementIndex = vertexIndex * (this.format.size >>> 2) + (element.offset >>> 2)
        let float = element.type == GL.FLOAT
        let array = float ? this.floatData : this.uintData
        switch element.size
            1:
                return array[elementIndex]
            2:
                //  needs to use || and not ?? as there is a bug in babel that will try to call type new
                return new (type || Vector2)()
                    array[elementIndex+0]
                    array[elementIndex+1]
            3:
                return new (type || Vector3)()
                    array[elementIndex+0]
                    array[elementIndex+1]
                    array[elementIndex+2]
            4:
                return new (type || Vector4)()
                    array[elementIndex+0]
                    array[elementIndex+1]
                    array[elementIndex+2]
                    array[elementIndex+3]
            default:
                throw new Error()

    set()
        vertexIndex: Number
        attributeName: String
        value
        ->
        this.setMinLength(vertexIndex + 1)
        let element = this.getElement(attributeName)
        let elementIndex = vertexIndex * (this.format.size >>> 2) + (element.offset >>> 2)
        let float = element.type == GL.FLOAT
        let array = float ? this.floatData : this.uintData
        if element.size == 1
            array[elementIndex] = value
        else
            value.writeTo(array, elementIndex)
        return value

    setData(data: Array<Number>) ->
        this._length = data.length / this.format.components
        this.setCapacity(this._length)
        var index = 0
        for i in 0 .. this.length
            for float in this.format.floatElements
                (float ? this.floatData : this.uintData)[index] = data[index]
                index++
        return this

    toArray() ->
        let array: Array<Number> = []
        var index = 0
        for i in 0 .. this._length
            for float in this.format.floatElements
                array[index] = (float ? this.floatData : this.uintData)[index]
                index++
        return array