import .Node
import ..math
    .Capsule
    .Collision
    .Color
    .Rectangle
    .Vector3
    .Spacing
    .Size
    .BoundingShape
    .Line
    .Matrix4
    .functions
import .Dock
    layout
import .Pickable
import ..TextureBase
import ..Graphics
import ..Graphics3D
// import Graphics2D from "../Graphics2D"

type LayoutFunction = (container) => Void

export default class Control extends Node

    x: Number = 0
    y: Number = 0
    width: Number = 100
    height: Number = 50
    _backgroundColor: Color | Null = null
    get backgroundColor() -> this._backgroundColor
    set backgroundColor(value) ->
        if this._backgroundColor != value
            this._backgroundColor = value
            this.invalidate()
    backgroundImage: String | TextureBase
    color: Color = Color.black
    margin: Spacing = Spacing.zero
    padding: Spacing = Spacing.zero
    pickRadius: Number
    minimumSize: Size
    maximumSize: Size
    optimumSize: Size
    text: String
    fontSize: Number
    //  Layout function for positioning children.
    layoutChildren: LayoutFunction = layout
    //  Layout options for self.
    layout: Any

    draw(g: Graphics) ->
        this.drawBackground(g)
        super.draw(g)
        // if this.text && g is Graphics2D
        //     let c = g.context
        //     if this.fontSize
        //         c.font = `normal ${this.fontSize}px sans-serif`
        //     c.fillStyle = this.color.toString()
        //     c.textAlign = "center"
        //     c.textBaseline = "middle"
        //     // right now only draws centered
        //     c.fillText(this.text, this.width / 2, this.height / 2, this.width)

    drawBackground(g: Graphics) ->
        if this.backgroundColor || this.backgroundImage
            g.fillRectangle(0, 0, this.width, this.height, this.backgroundColor || Color.white, this.backgroundImage)

    get transform() ->
        return (this.x != 0 || this.y != 0) ? Matrix4.translation(this.x, this.y, 0) : null
    set transform(value) -> throw new Error("Cannot set transform on Controls")

    updateChildren(g: Graphics) ->
        this.layoutChildren?(this)
        return super.updateChildren(g)

    get size() -> new Size(this.width, this.height)
    set size(value) ->
        this.width = value.width
        this.height = value.height
    get bounds() -> new Rectangle(this.x, this.y, this.width, this.height)
    set bounds(value) ->
        this.x = value.x
        this.y = value.y
        this.width = value.width
        this.height = value.height
    get position() -> new Vector3(this.x, this.y)
    set position(value) ->
        this.x = value.x
        this.y = value.y
    get boundingShape() -> new Rectangle(0, 0, this.width, this.height)

    get isVisible() ->
        return this.backgroundImage || (this.backgroundColor && this.backgroundColor.isVisible)

    _pickable: Pickable
    get pickable() ->
        var value = this._pickable
        if value is Null
            value = Pickable.children
            if this.isVisible || this.hasEventListener("pointerdown") || this.hasEventListener("pointerup") || this.hasEventListener("pointermove")
                value |= Pickable.self
        return value

    set pickable(value: Pickable) ->
        this._pickable = value

    //  pick children in reverse because we render the latter ones on top of the former
    get pickChildrenReverse() -> true

    collideSelf(ray: Capsule): Collision | Null ->
        if this.pickRadius
            ray = ray.addRadius(this.pickRadius)
        let intersection = this.boundingShape.intersectsCapsule(ray)
        if intersection
            return new Collision(ray, null, this, intersection)
        return null
