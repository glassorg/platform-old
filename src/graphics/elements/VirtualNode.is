import .INode

export let extendElementAsVirtualNodeRoot = (element) ->
    return
        Object.defineProperties()
            element
            {}
                previousSibling: {}
                    writable: true
                    value: null
                nextSibling: {}
                    writable: true
                    value: null
                firstChild: {}
                    writable: true
                    value: null
                lastChild: {}
                    writable: true
                    value: null
                appendChild: {}
                    value: VirtualNode.prototype.appendChild
                removeChild: {}
                    value: VirtualNode.prototype.removeChild
                insertBefore: {}
                    value: VirtualNode.prototype.insertBefore

export default class VirtualNode

    id: String
    parentNode: INode | Null = null
    firstChild: INode | Null = null
    lastChild: INode | Null = null
    nextSibling: INode | Null = null
    previousSibling: INode | Null = null

    get nodeType() -> 1

    eventListeners
    hasEventListener(name) -> this.eventListeners?[name] isnt Null
    dispatchEvent(e) ->
        let handler = this.eventListeners?[e.type]
        if handler
            handler.call(this, e)
    addEventListener(name, handler) ->
        console.log("addEventListener", name)
        if this[name] isnt Null
            throw new Error(`Event ${name} already has a handler`)
        if this.eventListeners is Null
            this.eventListeners = {}
        this.eventListeners[name] = handler
    removeEventListener(name, handler) ->
        if this.eventListeners?[name] != handler
            throw new Error(`Event ${name} is not the handler`)
        this.eventListeners[name] = null

    // composition methods compatible with Html Node
    appendChild(child) ->
        return this.insertBefore(child, null)

    removeChild(child) ->
        if child.parentNode != this
            throw new Error("node is not a child of this parentNode.")
        if this.firstChild == child
            this.firstChild = child.nextSibling
        if this.lastChild == child
            this.lastChild = child.previousSibling
        if child.previousSibling != null
            child.previousSibling.nextSibling = child.nextSibling
        if child.nextSibling != null
            child.nextSibling.previousSibling = child.previousSibling
        child.parentNode = null
        child.previousSibling = null
        child.nextSibling = null
        return child

    insertBefore(child, ref) ->
        if child.parentNode != null
            child.parentNode.removeChild(child)
        if ref is Null
            child.previousSibling = this.lastChild
            if child.previousSibling != null
                child.previousSibling.nextSibling = child
            if this.firstChild is Null
                this.firstChild = child
            this.lastChild = child
        else
            if ref.parentNode != this
                throw new Error("Reference node is not a child")
            child.previousSibling = ref.previousSibling
            if child.previousSibling isnt Null
                child.previousSibling.nextSibling = child
            child.nextSibling = ref
            ref.previousSibling = child
            if this.firstChild == ref
                this.firstChild = child
        child.parentNode = this
        return child

    static nodes = new Map()
