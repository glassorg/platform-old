import .Control
import .Dock
import .Pickable
import ..Graphics
import ..Graphics3D
import ..Program
import ..math.Matrix4

export default class Viewport extends Control

    _projection: Matrix4 = Matrix4.identity
    _view: Matrix4 = Matrix4.identity
    layout = Dock.fill
    effect = Program.default3D
    // pickable = Pickable.self | Pickable.children

    get view() -> this._view
    set view(value) ->
        this.invalidate()
        this._view = value

    get projection() -> this._projection
    set projection(value) ->
        this.invalidate()
        this._projection = value

    get screen() ->
        let { x, y, width: w, height: h } = this
        // transforms from -1 to +1 to screen width
        return new Matrix4()
            w / 2, 0, 0, 0
            0, - h / 2, 0, 0
            0, 0, - 0.5, 0
            w / 2, h / 2, 0.5, 1

    get pickingTransform() ->
        return
            Matrix4.multiply()
                this.screen
                this.projection
                this.view
            .inverse()

    get transform() -> Matrix4.identity

    drawChildren(g: Graphics) ->
        let saveProjection = g.uniforms.projection
        g.uniforms.projection = this.projection
        let saveView = g.uniforms.view
        g.uniforms.view = this.view
        if g is Graphics3D
            g.flush()
            // really we need the absolute x, y position taking ancestors into account
            // gl viewports start in the lower left so we must convert.
            g.gl.viewport(this.x, g.uniforms.screen.y - this.height - this.y, this.width, this.height)
        super.drawChildren(g)
        if g is Graphics3D
            g.flush()
            // restore viewport
            g.gl.viewport(0, 0, g.width, g.height)
        g.uniforms.projection = saveProjection
        g.uniforms.view = saveView