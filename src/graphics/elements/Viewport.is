import .Control
import .Dock
import ..Graphics
import ..Graphics3D
import ..Program
import ..math.Matrix4

export default class Viewport extends Control

    _projection: Matrix4 = Matrix4.identity
    _view: Matrix4 = Matrix4.identity
    layout = Dock.fill
    effect = Program.default3D

    get view() -> this._view
    set view(value) ->
        this.invalidate()
        this._view = value

    get projection() -> this._projection
    set projection(value) ->
        this.invalidate()
        this._projection = value

    get pickingTransform() ->
        // haven't tested yet, this might be reversed
        return this.view.multiply(this.projection).inverse()

    get transform() -> null

    drawBackground(g: Graphics) ->
        // this would draw in wrong coordinate space
    render(g: Graphics) ->
        // we draw background in the parents coordinate space before we reset ours
        if this.backgroundColor || this.backgroundImage
            g.fillRectangle(this.x, this.y, this.width, this.height, this.backgroundColor ?? Color.white, this.backgroundImage)
        super.render(g)

    drawChildren(g: Graphics) ->
        let saveProjection = g.uniforms.projection
        g.uniforms.projection = this.projection
        let saveView = g.uniforms.view
        g.uniforms.view = this.view
        if g is Graphics3D
            g.flush()
            // really we need the absolute x, y position taking ancestors into account
            // gl viewports start in the lower left so we must convert.
            g.gl.viewport(this.x, g.uniforms.screen.y - this.height - this.y, this.width, this.height)
        super.drawChildren(g)
        if g is Graphics3D
            g.flush()
            // restore viewport
            g.gl.viewport(0, 0, g.width, g.height)

        g.uniforms.projection = saveProjection
        g.uniforms.view = saveView