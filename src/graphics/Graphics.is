import ..math.Color
import ..math.Matrix4
import .ResourceManager
import .ResourceLoader
import .Invalidatable

export default abstract class Graphics

    // resources
    resources: ResourceManager
    // timing
    time = 0
    // properties
    abstract get width(): Number ->
    abstract get height(): Number ->
    // render lifecycle
    abstract begin() ->
    abstract end() ->
    // transformation
    //            { modelView: Matrix4, projection: Matrix4 }
    uniforms: .modelView is Matrix4 & .projection is Matrix4
    abstract get transform(): Matrix4 ->
    abstract set transform(value: Matrix4) ->
    // drawing
    abstract clear(color: Color, depth: Number) ->
    drawImage(image, x: Number, y: Number, width: Number, height: Number) ->
        this.fillRectangle(x, y, width, height, Color.white, image)
    fillRectangle(x: Number, y: Number, width: Number, height: Number, color: Color, texture?) ->
        throw new Error()
    // request redraw
    abstract invalidate() ->

    //  Shorthand for Graphics.resources.getResource(loader, id, dependent)
    resource(loader: ResourceLoader, id: String, dependent: Invalidatable): T | Null ->
        return this.resources.get(loader, id, dependent)

    constructor() ->
        this.resources = new ResourceManager(this)
