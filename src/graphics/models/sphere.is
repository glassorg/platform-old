import ..Graphics3D
import ..VertexFormat
import ..math.Vector3
import ..Mesh
import ..VertexArray
import ..IndexArray
import ...utility.common
    memoize

export function createSphereMesh() ->
    //  algorithm adapted from https://wiki.mcneel.com/developer/scriptsamples/icosahedron
    //  we need to add the icosohedron vertices.
    //  lets make it a unit sphere.
    let radius = 1.0
    let sqr5 = Math.sqrt(5.0)
    let phi = (1.0 + sqr5) / 2.0
    let ratio = Math.sqrt(10.0 + 2 * sqr5) / (4.0 * phi)
    let a = (radius / ratio) / (2.0 * 1.0)
    let b = (radius / ratio) / (2.0 * phi)
    let normal = new Vector3(1, 0, 0)
    let vertices = []
        0,  b, -a, ...normal
        b,  a,  0, ...normal
        -b,  a,  0, ...normal
        0,  b,  a, ...normal
        0, -b,  a, ...normal
        -a,  0,  b, ...normal
        0, -b, -a, ...normal
        a,  0, -b, ...normal
        a,  0,  b, ...normal
        -a,  0, -b, ...normal
        b, -a,  0, ...normal
        -b, -a,  0, ...normal
    let faces = []
        2, 0, 1
        1, 3, 2
        5, 3, 4
        4, 3, 8
        7, 0, 6
        6, 0, 9
        11, 4, 10
        10, 6, 11
        9, 2, 5
        5, 11, 9
        8, 1, 7
        7, 10, 8
        2, 3, 5
        8, 3, 1
        9, 0, 2
        1, 0, 7
        11, 6, 9
        7, 6, 10
        5, 4, 11
        10, 4, 8
    // TODO: calculate normals, make mesh.
    let mesh = new Mesh()
        new VertexArray(VertexFormat.positionNormal, 12).setData(vertices)
        new IndexArray(20).setData(faces)
    return mesh

let sphereFactory = memoize()
    (detail = 0) ->
        return (g: Graphics3D) ->
            let mesh = createSphereMesh()
            mesh.subdivideAllFaces(detail)
            mesh.vertices.filter("position", Vector3)
                p => p.normalize()
            mesh.computeNormals()
            return mesh.createIndexBuffer(g)

export default sphereFactory
