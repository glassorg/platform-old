import .VertexElement
import .GL.*
import .functions
    getGLTypeSize

//  This creates an array that tracks whether each 
//  For each 4 byte data section in the vertex format
//  is a float (true) or an integer (false)
function get4ByteComponentTypeArray(vertexFormat: VertexFormat) ->
    let array = []
    for element in vertexFormat.elements
        if element.type == GL.FLOAT
            for i in 0..element.size
                array.push(true)
        else if (element.type == GL.UNSIGNED_INT)
            for i in 0..element.size
                array.push(false)
        else if (element.type == GL.UNSIGNED_BYTE)
            if element.size != 4
                throw new Error(`UNSIGNED_BYTE type must come in vector size 4`)
            array.push(false)
        else
            throw new Error(`Unsupported type: ${element.type}`)
    return array

export default class VertexFormat

    // The individual elements that make up this vertex format.
    elements: Array<VertexElement>
    //  The size of this vertex format in bytes.
    size: Number
    // should be private
    string: String
    //  Contains true for each 4 byte component which is a float.
    //  If false then the component is probably 4 packed unsignedbytes.
    floatElements: Array<Boolean>

    constructor(...elements: Array<VertexElement>) ->
        this.elements = elements
        for element in elements
            elements[element.name] = element
        // now initialize correct offset and stride
        var offset: Integer = 0
        for element in elements
            if element.offset < 0
                element.offset = offset
            offset += element.size * getGLTypeSize(element.type)
        this.size = offset
        let stride = offset
        for element in elements
            if element.stride < 0
                element.stride = stride
        this.string = this.elements.join("")
        this.floatElements = get4ByteComponentTypeArray(this)

    get components() -> this.size / 4
    toString() -> this.string

    static position2 = new VertexFormat()
        new VertexElement("position", 2)
    static position = new VertexFormat()
        new VertexElement("position", 3)
    static positionColor = new VertexFormat()
        new VertexElement("position", 3)
        new VertexElement("color", 4)
    static positionTexture = new VertexFormat()
        new VertexElement("position", 3)
        new VertexElement("texcoord_0", 2)
    static positionNormal = new VertexFormat()
        new VertexElement("position", 3)
        new VertexElement("normal", 3)
    static positionColorTexture = new VertexFormat()
        new VertexElement("position", 3)
        new VertexElement("color", 4)
        new VertexElement("texcoord_0", 2)