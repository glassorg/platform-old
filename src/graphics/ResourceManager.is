import .ResourceLoader
// import .Graphics
import ..elements.SceneNode
import .Invalidatable

class ResourceInfo
    loading = false
    dependents = new Set()
    value

export default class ResourceManager

    g //: Graphics
    resources //: Map<ResourceLoader,Map<String,ResourceInfo>>

    constructor(g) ->
        this.g = g
        this.resources = new Map()

    info(loader: ResourceLoader<T>, id: String): ResourceInfo<T> ->
        let resources = this.resources.get(loader)
        if resources is Null
            resources = new Map()
            this.resources.set(loader, resources)
        let info = resources.get(id)
        if info is Null
            info = new ResourceInfo()
            resources.set(id, info)
        return info

    // TODO: Continue, and consider AssignmentExpressions.
    load(loader: ResourceLoader<T>, id: String): Promise<T> ->
        return
            new Promise()
                (resolve, reject) =>
                    let result = this.get(loader, id)
                        {}
                            invalidate(value) ->
                                resolve(value)
                    if result isnt Null
                        resolve(result)

    get(loader: ResourceLoader<T>, id: String, dependent: Invalidatable): T | Null ->
        let info = this.info(loader, id)
        if !info.loading
            info.loading = true
            loader.load(this.g, id)
            .then()
                value =>
                    info.value = value
                    for dependent in info.dependents.values()
                        dependent.invalidate(value)
            .catch()
                e =>
                    console.error(`Error loading resource '${id}':`, e)
        if dependent && info.value is Null
            info.dependents.add(dependent)
        return info.value ?? null
