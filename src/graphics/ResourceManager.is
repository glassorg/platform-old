import .ResourceLoader
// import .Graphics
import .elements.Node
import .Invalidatable

class ResourceInfo
    loading = false
    observers = new Set()
    value = null

export default class ResourceManager

    g //: Graphics
    resources //: Map<ResourceLoader,Map<String,ResourceInfo>>

    constructor(g) ->
        this.g = g
        this.resources = new Map()

    info(loader: ResourceLoader<T>, id): ResourceInfo<T> ->
        var resources = this.resources.get(loader)
        if resources is Null
            resources = new Map()
            this.resources.set(loader, resources)
        var info = resources.get(id)
        if info is Null
            info = new ResourceInfo()
            resources.set(id, info)
        return info

    load(loader: ResourceLoader<T>, id): Promise<T> ->
        return
            new Promise()
                (resolve, reject) =>
                    let result =
                        this.get()
                            loader
                            id
                            {}
                                invalidate(value) ->
                                    resolve(value)
                    if result isnt Null
                        resolve(result)

    use(loader: ResourceLoader<T>, id, observer: (value) => Void): T | Null ->
        let info = this.info(loader, id)
        info.observers.add(observer)

        if info.value isnt Null
            observer(info.value)
        else if !info.loading
            console.log("Loading resource", { loader, id })
            info.loading = true
            loader.load(this.g, id)
            .then()
                value =>
                    info.value = value
                    for observer in info.observers
                        observer(value)
            .catch()
                e =>
                    console.error(`Error loading resource '${id}':`, e)

        return ->
            info.observers.delete(observer)
            if info.observers.size == 0
                console.log("release resource", { loader, id })

    get(loader: ResourceLoader<T>, id, observer: Invalidatable): T | Null ->
        console.log("ResourceManager.get is deprecated, use ResourceManager.use")
        this.use(loader, id)
            (value) =>
                observer?.invalidate()
        let info = this.info(loader, id)
        return info.value
