import .GL.*
import .Graphics3D
import .DataStream
import .DataBuffer
    DataType
    BufferUsage
import .IndexBuffer
import .Primitive
import .VertexBuffer
import .VertexFormat

export default class InstanceBuffer extends VertexBuffer

    instance: DataBuffer | Null

    constructor(graphics: Graphics3D, usage: BufferUsage, vertexFormat: VertexFormat, instance: IndexBuffer | Null) ->
        super(graphics, usage, vertexFormat, Primitive.models)
        this.instance = instance

    //  Used for instanced rendering.
    //  see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor
    get vertexDivisor() -> 1

    draw() ->
        if this.size > 0
            if this.instance isnt IndexBuffer
                throw new Error("Not supported yet or probably ever")
            else
                let vertices = this.instance.vertices
                this.graphics.bindAttributes([...vertices, this])
                this.graphics.bindUniforms()
                let vertexCount = this.instance.size
                let instanceCount = this.size / this.vertexFormat.components
                this.instance.bind()
                this.graphics.gl.drawElementsInstanced(vertices[0].primitive, vertexCount, GL.UNSIGNED_SHORT, 0, instanceCount)
