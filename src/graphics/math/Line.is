import .Vector3

//  Represents a line and/or a line segment.
//  The normalized position along the line corresponds to 
//  When representing a line segment then any positions between 'a' and 'b' inclusive
//  are consider on the line segment and can be represented with normalized values
//  between zero and one.
export default data struct Line

    a: Vector3
    b: Vector3

    //  Returns the position between a and b where 0 = a and 1 = b.
    //  @param alpha value normally between 0 and 1
    getPosition(alpha: F32) -> this.a.lerp(this.b, alpha)
    //  Returns the alpha value (normalized position along the line)
    //  that corresponds to the closest point on this line to the position.
    getAlpha(position: Vector3) ->
        let ab = this.b.subtract(this.a)
        let ap = position.subtract(this.a)
        return ab.dot(ap) / ab.lengthSquared()
    direction() -> this.b.subtract(this.a)
    reverse() -> new Line(this.b, this.a)
    support(v: Vector3) -> v.dot(this.a) > v.dot(this.b) ? this.a : this.b
    toString() -> `${this.a} -> ${this.b}`
