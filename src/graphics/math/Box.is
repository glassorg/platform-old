import .Vector3
import .Ray
import .Line
import .Range
import .functions
    getAlpha

export default data struct Box

    minX: Number
    minY: Number
    minZ: Number
    maxX: Number
    maxY: Number
    maxZ: Number

    // center() -> this.min.add(this.max).scale(0.5)
    // size() -> this.max.subtract(this.min)

    containsPoint(p: Vector3) ->
        let { min, max } = this
        return &&
            p.x >= minX
            p.y >= minY
            p.z >= minZ
            p.x <= maxX
            p.y <= maxY
            p.z <= maxZ

    rangeX() -> new Range(this.minX, this.maxX)
    rangeY() -> new Range(this.minY, this.maxY)
    rangeZ() -> new Range(this.minZ, this.maxZ)

    // returns a normalized range of intersection in the lines coordinate system
    intersectionLine(line: Line) ->
        return
            Range.intersection()
                new Range()
                    getAlpha(line.a.x, line.b.x, this.minX, 0)
                    getAlpha(line.a.x, line.b.x, this.maxX, 1)
                new Range()
                    getAlpha(line.a.y, line.b.y, this.minY, 0)
                    getAlpha(line.a.y, line.b.y, this.maxY, 1)
                new Range()
                    getAlpha(line.a.z, line.b.z, this.minZ, 0)
                    getAlpha(line.a.z, line.b.z, this.maxZ, 1)

    intersectsLine(line: Line) ->
        return Range.unit.overlaps(this.intersectionLine(line))

    static unitCube = new Box(0, 0, 0, 1, 1, 1)

    // normal(point: Vector3) ->
    //     let dx = (point.x - this.center.x) / this.size.x
    //     let dy = (point.y - this.center.y) / this.size.y
    //     let dz = (point.z - this.center.z) / this.size.z
    //     let max = Math.max(Math.abs(dx), Math.abs(dy), Math.abs(dz))
    //     let keepSignIfMax = (v) => Math.abs(v) >= max ? Math.sign(v) : 0
    //     return new Vector3()
    //         keepSignIfMax(dx)
    //         keepSignIfMax(dy)
    //         keepSignIfMax(dz)

    // raycastDistance(ray: Ray, front = true) ->
    //     let b = this.center
    //     let d = this.size
    //     let p = ray.point
    //     let h = ray.unitHeading

    //     // Overlap times for projection on each axis.
    //     let tx0 = (b.x - p.x - d.x) / h.x
    //     let ty0 = (b.y - p.y - d.y) / h.y
    //     let tz0 = (b.z - p.z - d.z) / h.z

    //     let tx1 = (b.x - p.x + d.x) / h.x
    //     let ty1 = (b.y - p.y + d.y) / h.y
    //     let tz1 = (b.z - p.z + d.z) / h.z

    //     // Overlaps in 3D when every axis is overlapped.
    //     let maxDistance = Math.min()
    //         Math.max(tx0, tx1)
    //         Math.max(ty0, ty1)
    //         Math.max(tz0, tz1)

    //     let minDistance = Math.max()
    //         Math.min(tx0, tx1)
    //         Math.min(ty0, ty1)
    //         Math.min(tz0, tz1)

    //     if maxDistance <= minDistance
    //         return null

    //     return front ? minDistance : maxDistance

    // raycast(ray: Ray, front = true) ->
    //     let distance = this.raycastDistance(ray, front)
    //     if distance is Null
    //         return null
    //     return ray.getPosition(distance)
