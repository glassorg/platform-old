import .Matrix4
import .functions
    equivalent

export default data struct Vector3

    x: F32 = 0
    y: F32 = 0
    z: F32 = 0

    *[Symbol.iterator]() ->
        yield this.x
        yield this.y
        yield this.z
    add(v: Vector3) -> new Vector3(this.x + v.x, this.y + v.y, this.z + v.z)
    subtract(v: Vector3) -> new Vector3(this.x - v.x, this.y - v.y, this.z - v.z)
    multiply(v: Vector3) -> new Vector3(this.x * v.x, this.y * v.y, this.z * v.z)
    divide(v: Vector3) ->
        return
            new Vector3()
                v.x == 0 ? 0 : this.x / v.x
                v.y == 0 ? 0 : this.y / v.y
                v.z == 0 ? 0 : this.z / v.z
    scale(f: F32) -> new Vector3(this.x * f, this.y * f, this.z * f)
    negate() -> new Vector3(- this.x, - this.y, - this.z)
    dot(v: Vector3) -> this.x * v.x + this.y * v.y + this.z * v.z
    cross(v: Vector3) ->
        return
            new Vector3()
                this.y * v.z - this.z * v.y
                this.z * v.x - this.x * v.z
                this.x * v.y - this.y * v.x
    equals(v: Vector3) -> this.x == v.x && this.y == v.y && this.z == v.z
    equivalent(v: Vector3) ->
        return
            &&
                equivalent(this.x, v.x)
                equivalent(this.y, v.y)
                equivalent(this.z, v.z)
    lerp(v: Vector3, alpha: F32) ->
        return
            new Vector3()
                this.x + alpha * (v.x - this.x)
                this.y + alpha * (v.y - this.y)
                this.z + alpha * (v.z - this.z)
    projection(v: Vector3) -> this.scale(v.dot(this) / this.lengthSquared())
    // what is this?
    rejection(v: Vector3) ->
        let s = v.dot(this) / this.lengthSquared()
        return
            new Vector3()
                v.x - this.x * s
                v.y - this.y * s
                v.z - this.z * s
    lengthSquared() -> this.x * this.x + this.y * this.y + this.z * this.z
    length() -> Math.hypot(this.x, this.y, this.z)
    normalize() ->
        let invLength = 1 / this.length()
        return new Vector3(this.x * invLength, this.y * invLength, this.z * invLength)
    translate(v: Vector3) -> this.add(v)
    transform(m: Matrix4) ->
        let { x, y, z } = this
        let w = m.m03 * x + m.m13 * y + m.m23 * z + m.m33 || 1.0
        return
            new Vector3()
                (m.m00 * x + m.m10 * y + m.m20 * z + m.m30) / w
                (m.m01 * x + m.m11 * y + m.m21 * z + m.m31) / w
                (m.m02 * x + m.m12 * y + m.m22 * z + m.m32) / w
    writeTo(array, index: F32) ->
        array[index + 0] = this.x
        array[index + 1] = this.y
        array[index + 2] = this.z
    toArray() -> [this.x, this.y, this.z]
    toFloat32Array() -> new Float32Array(this.toArray())
    toString() -> `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)})`
    static let zero = new Vector3(0, 0, 0)
    static random(radius: F32, generate = Math.random) ->
        let u = generate()
        let v = generate()
        let theta = 2 * Math.PI * u
        let phi = Math.acos(2 * v - 1)
        return
            new Vector3()
                Math.sin(theta) * Math.cos(phi) * radius
                Math.sin(theta) * Math.sin(phi) * radius
                Math.cos(theta) * radius
    static add(vectors) ->
        var x = 0
        var y = 0
        var z = 0
        for v in vectors
            x += v.x
            y += v.y
            z += v.z
        return new Vector3(x, y, z)
    static fromJSON(object) ->
        let { x, y, z} = object
        return new Vector3(x, y, z)
    static equals(a: Vector3 | Null, b: Vector3 | Null) ->
        if a == b
            return true
        if a is Null || b is Null
            return false
        return a.equals(b)
    static equivalent(a: Vector3 | Null, b: Vector3 | Null) ->
        if a == b
            return true
        if a is Null || b is Null
            return false
        return a.equivalent(b)

//     // https://www.habrador.com/tutorials/interpolation/1-catmull-rom-splines/
//     // //Returns a position between 4 Vector3 with Catmull-Rom spline algorithm
//     // //http://www.iquilezles.org/www/articles/minispline/minispline.htm
//     // Vector3 GetCatmullRomPosition(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
//     // {
//     // 	//The coefficients of the cubic polynomial (except the 0.5f * which I added later for performance)
//     // 	Vector3 a = 2f * p1;
//     // 	Vector3 b = p2 - p0;
//     // 	Vector3 c = 2f * p0 - 5f * p1 + 4f * p2 - p3;
//     // 	Vector3 d = -p0 + 3f * p1 - 3f * p2 + p3;

//     // 	//The cubic polynomial: a + b * t + c * t^2 + d * t^3
//     // 	Vector3 pos = 0.5f * (a + (b * t) + (c * t * t) + (d * t * t * t));

//     // 	return pos;
//     // }
