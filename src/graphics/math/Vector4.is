import .Matrix4
import .functions
    equivalent

export default data struct Vector4

    x: F32 = 0
    y: F32 = 0
    z: F32 = 0
    w: F32 = 0

    *[Symbol.iterator]() ->
        yield this.x
        yield this.y
        yield this.z
        yield this.w
    add(v: Vector4) -> new Vector4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w)
    subtract(v: Vector4) -> new Vector4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w)
    multiply(v: Vector4) -> new Vector4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w)
    divide(v: Vector4) ->
        return
            new Vector4()
                v.x == 0 ? 0 : this.x / v.x
                v.y == 0 ? 0 : this.y / v.y
                v.z == 0 ? 0 : this.z / v.z
                v.w == 0 ? 0 : this.w / v.w
    scale(f: F32) -> new Vector4(this.x * f, this.y * f, this.z * f, this.w * f)
    negate() -> new Vector4(- this.x, - this.y, - this.z, - this.w)
    dot(v: Vector4) -> this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w
    equals(v: Vector4) -> this.x == v.x && this.y == v.y && this.z == v.z && this.w == v.w
    equivalent(v: Vector4) ->
        return
            &&
                equivalent(this.x, v.x)
                equivalent(this.y, v.y)
                equivalent(this.z, v.z)
                equivalent(this.w, v.w)
    lerp(v: Vector4, alpha: F32) ->
        return
            new Vector4()
                this.x + alpha * (v.x - this.x)
                this.y + alpha * (v.y - this.y)
                this.z + alpha * (v.z - this.z)
                this.w + alpha * (v.w - this.w)
    lengthSquared() -> this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
    length() -> Math.hypot(this.x, this.y, this.z, this.w)
    normalize() ->
        let invLength = 1 / this.length()
        return new Vector4(this.x * invLength, this.y * invLength, this.z * invLength, this.w * invLength)
    translate(v: Vector4) -> this.add(v)
    transform(m: Matrix4) ->
        let { x, y, z, w } = this
        return
            new Vector4()
                (m.m00 * x + m.m10 * y + m.m20 * z + m.m30)
                (m.m01 * x + m.m11 * y + m.m21 * z + m.m31)
                (m.m02 * x + m.m12 * y + m.m22 * z + m.m32)
                (m.m03 * x + m.m13 * y + m.m23 * z + m.m33)
    writeTo(array, index: F32) ->
        array[index + 0] = this.x
        array[index + 1] = this.y
        array[index + 2] = this.z
        array[index + 3] = this.w
    toArray() -> [this.x, this.y, this.z, this.w]
    toFloat32Array() -> new Float32Array(this.toArray())
    toString() -> `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)}, ${this.w.toFixed(2)})`
    static let zero = new Vector4(0, 0, 0, 0)
    static add(vectors) ->
        var x = 0
        var y = 0
        var z = 0
        var w = 0
        for v in vectors
            x += v.x
            y += v.y
            z += v.z
            w += v.w
        return new Vector4(x, y, z, w)
    static fromJSON(object) ->
        let { x, y, z} = object
        return new Vector4(x, y, z)
    static equals(a: Vector4 | Null, b: Vector4 | Null) ->
        if a == b
            return true
        if a is Null || b is Null
            return false
        return a.equals(b)
    static equivalent(a: Vector4 | Null, b: Vector4 | Null) ->
        if a == b
            return true
        if a is Null || b is Null
            return false
        return a.equivalent(b)
