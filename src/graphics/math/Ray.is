import .Vector3
import .functions
    equivalent
import .Sphere
import .Box

//  Kris: I don't think the ray should have a unit heading
//  instead it should just have a direction which may or may not be normalized.
//  then UnitRay becomes a runtime type of Ray where the direction is normalized.
export default data struct Ray

    point: Vector3
    unitHeading: Vector3

    // constructor(point: Vector3, heading: Vector3) ->
    //     this.point = point
    //     if !equivalent(heading.lengthSquared(), 1)
    //         this.unitHeading = heading.normalize()
    //     else
    //         this.unitHeading = heading

    getPosition(distance: F32) -> this.point.add(this.unitHeading.scale(distance))

    containsPoint(point: Vector3) ->
        return equivalent(point.subtract(this.point).dot(this.unitHeading), 0)
