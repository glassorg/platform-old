import .Size
import .Vector2
import .Vector3
import .Vector4
import .Spacing
import .BoundingShape
import .Line
import .Capsule
import .Plane
import .functions
    clamp
    epsilon

export default data struct Rectangle

    x: F32
    y: F32
    width: F32
    height: F32

    get top() -> this.y
    get left() -> this.x
    get bottom() -> this.y + this.height
    get right() -> this.x + this.width
    get topLeft() -> new Vector2(this.x, this.y)
    get bottomRight() -> new Vector2(this.right, this.bottom)
    get topRight() -> new Vector2(this.right, this.bottom)
    get bottomLeft() -> new Vector2(this.left, this.bottom)

    contains(x: F32, y: F32) ->
        return
            &&
                x >= this.left
                x <= this.right
                y >= this.top
                y <= this.bottom
    containsPoint(point) -> this.contains(point.x, point.y)
    add(b: Spacing | Null) ->
        if !b || b.isZero
            return this
        return new Rectangle(this.x - b.left, this.y - b.top, this.width + b.left + b.right, this.height + b.top + b.bottom)
    subtract(b: Spacing | Null) ->
        if !b || b.isZero
            return this
        return new Rectangle(this.x + b.left, this.y + b.top, this.width - b.left - b.right, this.height - b.top - b.bottom)
    intersectsCapsule(capsule: Capsule): Vector3 | Null ->
        let line = capsule.line()
        let pointInRect = this.getClosestPoint(line)
        let alpha = line.getAlpha(pointInRect)
        let radius = capsule.getRadius(alpha)
        let pointInLine = line.getPosition(alpha)
        return pointInRect.subtract(pointInLine).length() <= (radius + epsilon) ? pointInRect : null
    intersectsLine(line: Line) ->
        let point = this.getPlane().getClosestPoint(line)
        return this.containsPoint(point)
    // Returns the closest point to the line which lies within this bounding shape.
    // If multiple points intersect the line the point closest to 'a' is preferred.
    getClosestPoint(line: Line) ->
        let point = this.getPlane().getClosestPoint(line)
        if this.containsPoint(point)
            return point
        let x = clamp(point.x, this.left, this.right)
        let y = clamp(point.y, this.top, this.bottom)
        return new Vector3(x, y, 0)
    // Returns the plane this Rectangle lies on.
    // The plane intersects the origin and the normal is in the positive z direction.
    getPlane() -> new Plane(new Vector3(0, 0, 1), 0)
    combine(b: Rectangle) ->
        if b == this || this.containsRectangle(b)
            return this
        if b.containsRectangle(this)
            return b
        let left = Math.min(this.left, b.left)
        let right = Math.max(this.right, b.right)
        let top = Math.min(this.top, b.top)
        let bottom = Math.max(this.bottom, b.bottom)
        return new Rectangle(left, top, right - left, bottom - top)
    containsRectangle(b: Rectangle) ->
        return this.contains(b.left, b.top) && this.contains(b.right, b.bottom)
    static var empty = Object.freeze(new Rectangle(0, 0, 0, 0))
    static getBounds(rectangles) ->
        if rectangles.length == 0
            return Rectangle.empty
        let result = rectangles[0]
        for r in rectangles
            result = result.combine(r)
        return result
