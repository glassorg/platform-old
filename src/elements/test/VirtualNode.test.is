import assert
    strict as assert
import "jsdom"
    JSDOM
import ..INode
import ..VirtualNode
    extendElementAsVirtualNodeRoot

let dom = new JSDOM("<html><head></head><body></body></html>")
let document = dom.window.document

class TestNode extends VirtualNode
    var name: String
    constructor(name: String) ->
        super()
        this.name = name
    toString() -> this.name

do
    // VirtualNode properties are initially null
    let root = new TestNode("root")
    assert(root.parentNode is Null)
    assert(root.firstChild is Null)
    assert(root.lastChild is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
do
    // appendChild works
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.appendChild(a)
    assert(root.firstChild == a)
    assert(root.lastChild == a)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.nextSibling is Null)
    assert(a.previousSibling is Null)

do
    // insertBefore(child, null) works
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.insertBefore(a, null)
    assert(root.firstChild == a)
    assert(root.lastChild == a)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.nextSibling is Null)
    assert(a.previousSibling is Null)

do
// insertBefore(child) one child works
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.insertBefore(a, null)
    let b = new TestNode("b")
    root.insertBefore(b, a)
    assert(root.firstChild == b)
    assert(root.lastChild == a)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.nextSibling is Null)
    assert(a.previousSibling == b)
    assert(b.parentNode == root)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.nextSibling == a)
    assert(b.previousSibling is Null)

do
    // insertBefore(child, ref) between two children works
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.appendChild(a)
    let c = new TestNode("c")
    root.appendChild(c)
    let b = new TestNode("b")
    root.insertBefore(b, c)
    assert(root.firstChild == a)
    assert(root.lastChild == c)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.previousSibling is Null)
    assert(a.nextSibling == b)
    assert(b.parentNode == root)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.previousSibling == a)
    assert(b.nextSibling == c)
    assert(c.parentNode == root)
    assert(c.firstChild is Null)
    assert(c.lastChild is Null)
    assert(c.previousSibling == b)
    assert(c.nextSibling is Null)

do
    // appendChild three
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.appendChild(a)
    let b = new TestNode("b")
    root.appendChild(b)
    let c = new TestNode("c")
    root.appendChild(c)
    assert(root.firstChild == a)
    assert(root.lastChild == c)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.previousSibling is Null)
    assert(a.nextSibling == b)
    assert(b.parentNode == root)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.previousSibling == a)
    assert(b.nextSibling == c)
    assert(c.parentNode == root)
    assert(c.firstChild is Null)
    assert(c.lastChild is Null)
    assert(c.previousSibling == b)
    assert(c.nextSibling is Null)
do
    // removeChild first
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.appendChild(a)
    let b = new TestNode("b")
    root.appendChild(b)
    let c = new TestNode("c")
    root.appendChild(c)
    root.removeChild(a)
    assert(root.firstChild == b)
    assert(root.lastChild == c)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode is Null)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.previousSibling is Null)
    assert(a.nextSibling is Null)
    assert(b.parentNode == root)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.previousSibling is Null)
    assert(b.nextSibling == c)
    assert(c.parentNode == root)
    assert(c.firstChild is Null)
    assert(c.lastChild is Null)
    assert(c.previousSibling == b)
    assert(c.nextSibling is Null)

do
    // removeChild middle
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.appendChild(a)
    let b = new TestNode("b")
    root.appendChild(b)
    let c = new TestNode("c")
    root.appendChild(c)
    root.removeChild(b)
    assert(root.firstChild == a)
    assert(root.lastChild == c)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.previousSibling is Null)
    assert(a.nextSibling == c)
    assert(b.parentNode is Null)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.previousSibling is Null)
    assert(b.nextSibling is Null)
    assert(c.parentNode == root)
    assert(c.firstChild is Null)
    assert(c.lastChild is Null)
    assert(c.previousSibling == a)
    assert(c.nextSibling is Null)

do
    // removeChild last
    let root = new TestNode("root")
    let a = new TestNode("a")
    root.appendChild(a)
    let b = new TestNode("b")
    root.appendChild(b)
    let c = new TestNode("c")
    root.appendChild(c)
    root.removeChild(c)
    assert(root.firstChild == a)
    assert(root.lastChild == b)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.previousSibling is Null)
    assert(a.nextSibling == b)
    assert(b.parentNode == root)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.previousSibling == a)
    assert(b.nextSibling is Null)
    assert(c.parentNode is Null)
    assert(c.firstChild is Null)
    assert(c.lastChild is Null)
    assert(c.previousSibling is Null)
    assert(c.nextSibling is Null)

do
    // removeChild middle from an actual Element
    let root = extendElementAsVirtualNodeRoot(document.createElement("canvas"))
    // now apply node handlers
    let a = new TestNode("a")
    root.appendChild(a)
    let b = new TestNode("b")
    root.appendChild(b)
    let c = new TestNode("c")
    root.appendChild(c)
    root.removeChild(b)
    assert(root.firstChild == a)
    assert(root.lastChild == c)
    assert(root.parentNode is Null)
    assert(root.nextSibling is Null)
    assert(root.previousSibling is Null)
    assert(a.parentNode == root)
    assert(a.firstChild is Null)
    assert(a.lastChild is Null)
    assert(a.previousSibling is Null)
    assert(a.nextSibling == c)
    assert(b.parentNode is Null)
    assert(b.firstChild is Null)
    assert(b.lastChild is Null)
    assert(b.previousSibling is Null)
    assert(b.nextSibling is Null)
    assert(c.parentNode == root)
    assert(c.firstChild is Null)
    assert(c.lastChild is Null)
    assert(c.previousSibling == a)
    assert(c.nextSibling is Null)
