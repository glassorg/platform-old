export import .Color

export let epsilon = 0.000001

export function equivalent(a: Number, b: Number) ->
    return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))

export function clamp(value: Number, min: Number = 0, max: Number = 1) ->
    return value < min ? min : value > max ? max : value

export function lerp(a, b, alpha = 0.5) ->
    if a is Number
        return a * (1 - alpha) + b * alpha
    return a.lerp(b, alpha)

export function easeInOutCubic(x) ->
    return x ** 2 * 3 - x ** 3 * 2

export type RandomNumberGenerator = (min: Number | Null = null, max: Number | Null = null) => Number

// Source: https://en.wikipedia.org/wiki/Xorshift
export function randomNumberGenerator(seed = Number.MAX_SAFE_INTEGER): RandomNumberGenerator ->
    let x = seed
    let coef = 1 / (1 << 31)
    return 
        random(min = 0, max = 1) ->
            x ^= x << 13
            x ^= x >> 7
            x ^= x << 17
            let r = Math.abs(x * coef)
            return min + r * (max - min)
