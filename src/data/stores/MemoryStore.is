import ..Key
    QueryKey
    IdentityKey
    isPossibleMatch
import ...utility.clonePatch
import ..Store
    Observer
import ..Namespace
import .Table

// We need better type format
// probably type Result = [String, Object | Array]
// type Result = Array & .[0] is String & .[1] is Object | Array
//
// Base class for ModelSource implementations.
// Also can serve as a simple in memory model source.
export default class MemoryStore extends Store

    tables = new Map()
    observers = new Map()
    values = new Map()
    _internalUnwatchKey = new Map()

    _addWatcher(key: Key, observer: Observer) ->
        let keyString = key.toString()
        var keyObservers = this.observers.get(keyString)
        if keyObservers is Null
            keyObservers = new Set()
            this.observers.set(keyString, keyObservers)
        keyObservers.add(observer)
        if keyObservers.size == 1
            this._internalUnwatchKey.set(keyString, this._onWatched(key))
    _removeWatcher(key: Key, observer: Observer) ->
        let keyString = key.toString()
        let keyObservers = this.observers.get(keyString)
        if keyObservers?.has(observer)
            keyObservers.delete(observer)
            // if keyObservers.size == 0
            //     this._internalUnwatchKey.get(keyString)()
            //     this._internalUnwatchKey.delete(keyString)
        else
            throw new Error(`observer for key '${keyString}' not found`)

    _onWatched(key: Key) ->
        //  subclasses can override this to actually watch things
        //  then return a function that will be called to unwatch things
        return () ->

    _onObserve(key: Key) ->
        var value = this.peek(key)
        if value is Undefined
            value = null
        this._notify(key.toString(), value)

    watch(key: Key, observer: Observer) ->
        this._addWatcher(key, observer)
        this._onObserve(key, observer)
        return =>
            this._removeWatcher(key, observer)

    _getTable(key: QueryKey) ->
        var table = this.tables.get(key.toString())
        if table is Null
            table = new Table(key)
            for [ikey, ivalue] in this.values.values()
                if ikey is IdentityKey
                    if isPossibleMatch(key, ikey)
                        table.update(ikey, ivalue)
            this.tables.set(key.toString(), table)
        return table

    peek(key: Key) ->
        if key is IdentityKey
            return this.peekRaw(key)
        return this._getTable(key).getValues(this)
    
    peekRaw(key: Key) ->
        let value = this.values.get(key.toString())
        return value?[1]

    async patch(key: IdentityKey, value) ->
        value = clonePatch(await this.get(key), value)
        if key.type isnt Null && value isnt Null
            if value isnt key.type
                if key.type.coerce is Function
                    value = key.type.coerce(value)
                    if value isnt key.type
                        throw new Error(value + " wasnt coerced to type " + (key.type.name ?? key.type))
                if value isnt key.type
                    if key.type is Function && value is Object
                        value = new key.type(value)
                    else
                        throw new Error(value + " isnt type " + (key.type.name ?? key.type))

        value = await this._setValue(key, value)
        return value

    async _updateValues(notifyQueue, ...keyValues) ->
        let updateTables = new Set()
        for [key, value] in keyValues
            if value isnt Null
                if key is IdentityKey
                    if key.type isnt Null && value isnt Null
                        if value isnt key.type
                            throw new Error(value + " isnt type " + (key.type.name ?? key.type))
                    for table in this.tables.values()
                        if table.update(key, value)
                            updateTables.add(table)
        for table in updateTables
            notifyQueue.set(table.key.toString(), table.getValues(this))

    async _setValue(key: Key, value) ->
        let notifyQueue = new Map()
        let currentValue = this.peek(key)
        if currentValue == value
            return false
        if value is Null
            this.values.delete(key.toString())
        else
            this.values.set(key.toString(), [key, value])

        if value is Array
            await this._updateValues(notifyQueue, ...value)
        else if value isnt Null
            await this._updateValues(notifyQueue, [key, value])

        notifyQueue.set(key.toString(), value)
        for [key, value] in notifyQueue
            this._notify(key.toString(), value)

        return value

    _notify(key: String, value) ->
        let keyObservers = this.observers.get(key.toString())
        if keyObservers isnt Null
            for observer in keyObservers
                observer(value)
