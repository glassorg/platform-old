import ..Key
    IdentityKey
    QueryKey
import ..Index
import .MemoryStore
import ..Serializer
import ..Namespace
import ..Entity
import ...utility.common.*
import firebase.app as firebase
//  import for side effect which makes firebase.firestore() function available
import "firebase/firestore"

export let serializedProperty = "_"

export type Snapshot = .data is Function & .exists is Boolean & .ref.path is String

export function getIndexedValues(entity: Entity) ->
    let values = {}
    let deleted = entity.deleted isnt Null
    // we only index root values for now
    for [name, property] in entity.properties
        let indexed = property[Index.symbol]
        if indexed
            values[name] = entity[name]
    return values

let getSerializer = common.memoize(ns -> new Serializer(ns))

function serialize(entity: Entity, namespace: Namespace) ->
    //  remove the type
    let values = Object.assign({}, entity)
    //  remove the key
    delete values.key
    return getSerializer(namespace).stringify(values)

function deserialize(key: IdentityKey, serialized: String, namespace: Namespace) ->
    let values = getSerializer(namespace).parse(serialized)
    //  restore the key
    values.key = key
    //  restore the type
    return new key.type(values)

export function toDocumentValues(entity: Entity, namespace: Namespace) ->
    return { [serializedProperty]: serialize(entity, namespace), ...getIndexedValues(entity) }

function getKey(namespace: Namespace, doc: Snapshot): IdentityKey -> Key.parse(namespace, doc.ref.path)

export function toEntity(namespace: Namespace, doc: Snapshot, key: IdentityKey = getKey(namespace, doc)): T | Null ->
    if !doc.exists
        return null
    let data = doc.data()
    return deserialize(key, data[serializedProperty], namespace)

export function toGoogleQuery(db, key: Key) ->
    let { parent, type, query } = key
    // TODO: Fix key.path!!!
    var gquery = db.collection(key.path)
    if query
        if query.limit isnt Null
            gquery = gquery.limit(query.limit)
        if query.offset isnt Null
            gquery = gquery.startAt(query.offset)
        if query.sort
            for sort in query.sort
                for [name,direction] in sort
                    if sort.hasOwnProperty(name)
                        gquery = gquery.orderBy(name, direction ? "asc" : "desc")
        if query.where
            let where = query.where
            for [name,value] in where
                if value is Object
                    for [op,opValue] in value
                        // convert op to google format
                        let googleOp = op == "contains" ? "array-contains" : op
                        gquery = gquery.where(name, googleOp, opValue)
                else
                    gquery = gquery.where(name, "==", value)
    return gquery

export default class FireStore extends MemoryStore

    namespace: Namespace
    serializer: Serializer
    db

    constructor(namespace: Namespace) ->
        super()
        this.namespace = namespace
        this.serializer = new Serializer(namespace)
        this.db = firebase.firestore()

    _onObserve(key: Key) ->
        let value = this.peek(key)
        if value isnt Undefined
            this._notify(key, value)

    _onWatched(key: Key) ->
        if key is QueryKey
            // query set of entities
            let collectionRef = toGoogleQuery(this.db, key)
            return collectionRef.onSnapshot()
                snapshot =>
                    let keyValues = []
                    // save each doc
                    //  TODO: What to do with these results
                    //  convert each one into a keyValue
                    for doc in snapshot.docs
                        let key = getKey(this.namespace, doc)
                        let value = toEntity(this.namespace, doc, key)
                        // super.setValue(key, entity)
                        if value isnt Null
                            keyValues.push([key, value])
                    // // save keys as result of query.
                    super._setValue(key, keyValues)
        else
            let docRef = this.db.doc(key.path)
            return docRef.onSnapshot()
                doc =>
                    let key = getKey(this.namespace, doc)
                    let entity = toEntity(this.namespace, doc, key)
                    super._setValue(key, entity)

    _setValue(key: Key, value) ->
        let changed = super._setValue(key, value)
        if changed && key is IdentityKey
            //  mark this entity as watched
            if value isnt Null
                if key.type isnt Null && value.constructor != key.type
                    value = new key.type(value)

            let doc = toDocumentValues(value, this.namespace)
            let docRef = this.db.doc(key.path)
            if value isnt Null
                docRef.set(doc, { merge: true })
                .then()
                    =>
                        console.log(`FireStore.setValue updated`)
                .catch()
                    e =>
                        console.error(`FireStore.setValue update error:`, e)
            else
                docRef.delete()
                .then()
                    =>
                        console.log(`FireStore.setValue deleted`)
                .catch()
                    e =>
                        console.error(`FireStore.setValue delete error`, e)
        return changed
