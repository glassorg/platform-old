import ..Key
    IdentityKey
    QueryKey
import ..Index
import .MemoryStore
import ..Serializer
import ..Namespace
import ..Record
import ...utility.common.*
import firebase.app as firebase
import .Table
//  import for side effect which makes firebase.firestore() function available
import "firebase/firestore"

let isNode = process?.title?.endsWith("node") || false

export let serializedProperty = "_"

export type Snapshot = .data is Function & .exists is Boolean & .ref.path is String

export function getIndexedValues(record, values = {}, prefix = "") ->
    let deleted = record.deleted isnt Null
    // we only index root values for now
    for [name, property] in record.properties
        let indexed = property[Index.symbol]
        if indexed
            values[prefix + name] = record[name]
        let value = record[name]
        // recurse and index sub value items.
        if value?.properties is Map
            getIndexedValues(value, values, (prefix.length > 0 ? (prefix + "_" + name) : name) + "_")
    
    return values

let isTypedArray = (value) -> value?.buffer is ArrayBuffer

function isBlob(value) ->
    if isNode
        return value is Buffer
    return value is firebase.firestore.Blob

function getBlobBuffer(value) ->
    if isNode
        return value.buffer.slice(value.byteOffset, value.byteOffset + value.length)
    return value.toUint8Array().buffer

function toBlob(value) ->
    if isNode
        return Buffer.from(value.buffer)
    return firebase.firestore.Blob.fromUint8Array(new Uint8Array(value.buffer))

export function getBinaryValues(record) ->
    let values = {}
    // we only index root values for now
    for [name, property] in record.properties
        let value = record[name]
        if isTypedArray(value)
            values[name] = toBlob(value)
    return values

let getSerializer = common.memoize(ns -> new Serializer(ns))

//  BEGIN Serialization Code
function serialize(record: Record, namespace: Namespace) ->
    //  remove the type and key
    let values = { ...record, key: undefined }
    //  remove any binary values
    for [name, value] in values
        if isTypedArray(value)
            delete values[name]
    return getSerializer(namespace).stringify(values)

function deserialize(key: IdentityKey, serialized: String, namespace: Namespace) ->
    let values = getSerializer(namespace).parse(serialized)
    //  restore the key
    values.key = key
    //  restore the type
    return new key.type(values)

export function toDocumentValues(record: Record, namespace: Namespace) ->
    let serialized = serialize(record, namespace)
    let binaryValues = getBinaryValues(record)
    return { [serializedProperty]: serialized, ...getIndexedValues(record), ...binaryValues }

function getKey(namespace: Namespace, doc: Snapshot): IdentityKey -> Key.parse(namespace, doc.ref.path)

export function toEntity(namespace: Namespace, doc: Snapshot, key: IdentityKey = getKey(namespace, doc)): T | Null ->
    // console.log("Calling toEntity on", key.toString())
    if !doc.exists
        return null
    let data = doc.data()
    let entity = deserialize(key, data[serializedProperty], namespace)
    // now set the binary data back on the object.
    for [name, value] in data
        if isBlob(value)
            let currentValue = entity[name]
            if currentValue is Null
                console.warn(`binary fields must have default values: ${entity.constructor.name}.${name}`)
            else
                let newValue = new currentValue.constructor(getBlobBuffer(value))
                entity[name] = newValue
    return entity

//  END Serialization Code

export function toGoogleQuery(db, key: Key) ->
    let { parent, type, query } = key
    // TODO: Fix key.path!!!
    var gquery = db.collection(key.path)
    if query
        if query.limit isnt Null
            // google has no offset support, so we provide it by skipping results
            gquery = gquery.limit((query.offset || 0) + query.limit)
        // if query.offset isnt Null
        //      //  this doesn't work like I thought. it expects document snapshots
        //     gquery = gquery.startAt(query.offset)
        if query.sort
            for sort in query.sort
                for [name,direction] in sort
                    if sort.hasOwnProperty(name)
                        gquery = gquery.orderBy(name, direction ? "asc" : "desc")
        if query.where
            let where = query.where
            for [name,value] in where
                if value is Object
                    for [op,opValue] in value
                        // convert op to google format
                        let googleOp = op == "contains" ? "array-contains" : op
                        gquery = gquery.where(name, googleOp, opValue)
                else
                    gquery = gquery.where(name, "==", value)
    return gquery

function isDocSame(doc, record: Record, namespace: Namespace) ->
    let updated = doc.get("updated_time")
    let lastUpdated = record?.created?.time

    // Stamping was not always enforced on the web client, so we need
    // to handle missing timestamps by assuming a change happened.
    if !updated || !lastUpdated
        return false

    let docKeyString = getKey(namespace, doc).toString()
    let recordKeyString = record.key.toString()

    let keySame = docKeyString == recordKeyString
    let updatedSame = updated == lastUpdated

    return updatedSame && keySame 

function areQueryResultsSame(docs, offset, records, namespace: Namespace) ->
    if !records
        return false
    let docsSize = docs.length - offset
    let tableSize = records?.length ?? 0
    if docsSize != tableSize
        return false
    for i in 0 .. tableSize
        let doc = docs[i + offset]
        let record = records[i][1]
        if !isDocSame(doc, record, namespace)
            return false
    return true

export default class FireStore extends MemoryStore

    namespace: Namespace
    serializer: Serializer
    db
    _hasResults: Set<String>

    constructor(namespace: Namespace, db = firebase.firestore()) ->
        super()
        this.namespace = namespace
        this.serializer = new Serializer(namespace)
        this.db = db
        this._hasResults = new Set()
    
    _onObserve(key: Key) ->
        let value = this.peek(key)
        if value isnt Undefined
            this._notify(key.toString(), value)

    _onWatched(key: Key) ->
        if key is QueryKey
            // query set of entities
            let collectionRef = toGoogleQuery(this.db, key)
            return collectionRef.onSnapshot()
                snapshot =>
                    let keyValues = []
                    let offset = key.query.offset || 0

                    let keyString = key.toString()
                    let records = this.values.get(keyString)?[1]

                    // Avoid expensive reparse if nothing changed. (yes this happens sometimes)
                    if areQueryResultsSame(snapshot.docs, offset, records, this.namespace)
                        return
                    
                    let previousValues = {}
                        if records
                            for entry in records
                                let [key, value] = entry
                                [key.toString()]: value
                    
                    for doc, index in snapshot.docs
                        if index >= offset
                            let key = getKey(this.namespace, doc)

                            let previousValue = previousValues[key.toString()]
                            if previousValue
                                let prevKey = previousValue.key
                                if isDocSame(doc, previousValue, this.namespace)
                                    keyValues.push([key, previousValue])
                                    // console.log("Reusing previous value from", doc.get("updated_time"))
                                    continue
                            
                            let value = toEntity(this.namespace, doc, key)
                            if value isnt Null
                                keyValues.push([key, value])
                            
                    // save keys as result of query.
                    this._hasResults.add(keyString)
                    super._setValue(key, keyValues)
        else
            let docRef = this.db.doc(key.path)
            return docRef.onSnapshot()
                doc =>
                    let key = getKey(this.namespace, doc)
                    let record = toEntity(this.namespace, doc, key)
                    this._hasResults.add(key.toString())
                    super._setValue(key, record)

    _setValue(key: Key, value) ->
        if value is Record
            let user = firebase.auth().currentUser
            value = value.stamp(user.email)
        let changed = super._setValue(key, value)
        return new Promise()
            (resolve, reject) =>
                if !changed
                    resolve(value)
                    return
                if key is IdentityKey
                    //  mark this record as watched
                    if value isnt Null
                        if key.type isnt Null && value.constructor != key.type
                            value = new key.type(value)

                    let docRef = this.db.doc(key.path)
                    if value isnt Null
                        let doc = toDocumentValues(value, this.namespace)
                        docRef.set(doc, { merge: true })
                        .then()
                            =>
                                console.log(`FireStore.setValue updated`)
                                resolve(value)
                        .catch()
                            e =>
                                console.error(`FireStore.setValue update error:`, e)
                                reject(e)
                    else
                        docRef.delete()
                        .then()
                            =>
                                console.log(`FireStore.setValue deleted`)
                                resolve(value)
                        .catch()
                            e =>
                                console.error(`FireStore.setValue delete error`, e)
                                reject(e)

    _notify(key: String, value) ->
        // we don't notify clients until we have results.
        if this._hasResults.has(key)
            super._notify(key, value)
