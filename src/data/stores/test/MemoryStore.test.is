import assert
    strict as assert
import ..MemoryStore
import ...Model
import ...Key
    IdentityKey
    QueryKey
import ...Query
    createPredicate

type ShortName = String & == .trim() & .length <= 10

let primitiveKey = Key.create(ShortName, "singleton")

assert.doesNotReject()
    async ->
        try
            var store = new MemoryStore()
            var value = await store.get(primitiveKey)
            assert.deepEqual(value, null)
            await store.patch(primitiveKey, "foo")
            value = await store.get(primitiveKey)
            assert.deepEqual(value, "foo")
            // make sure it validates so you cannot set invalid types
            assert.throws()
                ->
                    store._setValue(primitiveKey, 12)
            //  Query Peeking
            var queryKey = Key.create(Person, {})
            var persons = await store.get(queryKey)
            assert.deepEqual(persons, [])
            //  this also tests implied creation of Person via ionscript.Data.create function.
            //  TODO: Figure out why this async stuff isn't working yet.
            // let kris = Key.create(Person, "Kris")
            // await store.patch(kris, new Person({ name: "Kris" }))
            // persons = await store.get(queryKey)
            // assert.deepEqual(JSON.stringify(persons), JSON.stringify([kris]))
            // let kody = Key.create(Person, "Kody")
            // await store.patch(kody, { name: "Kody" })
            // persons = await store.get(queryKey)
            // assert.deepEqual(JSON.stringify(persons), JSON.stringify([kris, kody]))
        catch e
            console.error("ERROR!" + e)

data class Person extends Model
    name: String

// Verify that watching identical keys no longer gives incomplete results.
do async ->
    try
        var store = new MemoryStore()
        var key = Key.create(Integer, {})
        var events = []
        var expectedEvents = []
            "A "
            "A Integer/foo,11"
            "A Integer/foo,11"
            "B Integer/foo,11"
        store.watch()
            key
            newValue -> events.push("A " + newValue.toString())
        await store._setValue(key, [[Key.create(Integer, "foo"), 11]])
        store.watch()
            key
            newValue -> events.push("B " + newValue.toString())
        assert.equal()
            JSON.stringify(events)
            JSON.stringify(expectedEvents)
    catch e
        console.error(e)

// //  Where Query Peeking
// store = new MemoryStore()
// queryKey = Key.create(Person, { where: { name: "Kody" }})
// persons = store.get(queryKey)
// assert.deepEqual(persons, [])
// store.patch(Key.create(Person, "Kris"), { name: "Kris" })
// persons = store.get(queryKey)
// assert.deepEqual(JSON.stringify(persons), JSON.stringify([]))
// store.patch(Key.create(Person, "Kody"), { name: "Kody" })
// persons = store.get(queryKey)
// assert.deepEqual(JSON.stringify(persons), JSON.stringify([kody]))

// //  Full Query watching
// persons = null
// store = new MemoryStore()
// //  TODO: add unwatch test.
// var unwatch = store.watch()
//     Key.create(Person, {})
//     value ->
//         persons = value

// assert.deepEqual(persons, [])
// store.patch(Key.create(Person, "Kris"), { name: "Kris" })
// assert.deepEqual(JSON.stringify(persons), JSON.stringify([kris]))
// store.patch(Key.create(Person, "Kody"), { name: "Kody" })
// assert.deepEqual(JSON.stringify(persons), JSON.stringify([kris, kody]))
// var personList = store.list(Key.create(Person, {}))
// assert.deepEqual(personList.length, 2)
// //  check unwatch
// persons = null
// unwatch()
// store.patch(Key.create(Person, "Kringle"), { name: "Kringle" })
// assert.deepEqual(persons, null)

