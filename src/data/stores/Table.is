import ..Model
import ..Query
    createPredicate
    createSortCompareFunction
import ..Key
    IdentityKey
    QueryKey
    isPossibleMatch
import ..Store

type Predicate = (value) => Boolean

export default class Table
    key: QueryKey
    filter: Predicate
    keys = new Map()
    values: Array | Null = null

    constructor(key: QueryKey, values: Array | Null = null) ->
        this.key = key
        this.filter = createPredicate(key.query)
        this.values = values

    invalidateValues() ->
        this.values = null

    getValues(store: Store) ->
        if this.values is Null
            this.values = []
            let visited = new Set()
            let rawValues = store.peekRaw(this.key)
            if rawValues
                for [key, value] in rawValues
                    visited.add(key.toString())
                    this.values.push([key, value])
            for key in this.keys.values()
                if !visited.has(key.toString())
                    let value = store.peek(key)
                    if value isnt Null
                        this.values.push([key, value])
            if this.key.query.sort isnt Null && this.key.query.sort.length > 0
                this.values.sort(createSortCompareFunction(this.key.query))
        return this.values

    update(key: IdentityKey, value): Boolean ->
        if value isnt Null
            if isPossibleMatch(this.key, key) && this.filter(value)
                if !this.keys.has(key.toString())
                    this.invalidateValues()
                    this.keys.set(key.toString(), key)
                    return true
            else
                value = null

        if value is Null && this.keys.has(key.toString())
            this.invalidateValues()
            this.keys.delete(key.toString())
            return true
        return false
