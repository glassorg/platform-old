import ..Model
import ..Query
    createPredicate
    createSortCompareFunction
import ..Key
    IdentityKey
    QueryKey
    isPossibleMatch
import ..Store

type Predicate = (value) => Boolean

export default class Table
    key: QueryKey
    filter: Predicate
    keys = new Map()
    cachedKeys: Array<IdentityKey> | Null = null

    constructor(key: QueryKey) ->
        this.key = key
        this.filter = createPredicate(key.query)

    invalidateCachedKeys() ->
        this.cachedKeys = null

    getKeyIterator() -> this.keys.values()

    createSortedKeys(store: Store): Array<IdentityKey> ->
        if this.key.query.sort is Null || this.key.query.sort.length == 0
            return [...this.getKeyIterator()]

        //  get value for each key
        var values = []
        var valueToKeyMap = new Map()
        for key in this.getKeyIterator()
            let value = store.peek(key)
            if value isnt Null
                values.push(value)
                valueToKeyMap.set(value, key)

        //  sort values
        values.sort(createSortCompareFunction(this.key.query))
        //  convert back to keys and return
        return values.map(t => valueToKeyMap.get(t))

    getKeys(store: Store) ->
        if this.cachedKeys is Null
            this.cachedKeys = this.createSortedKeys(store)
        return this.cachedKeys

    update(key: IdentityKey, record): Boolean ->
        if record isnt Null
            if isPossibleMatch(this.key, key) && this.filter(record)
                if !this.keys.has(key.toString())
                    this.invalidateCachedKeys()
                    this.keys.set(key.toString(), key)
                    return true
            else
                record = null

        if record is Null && this.keys.has(key.toString())
            this.invalidateCachedKeys()
            this.keys.delete(key.toString())
            return true
        return false
