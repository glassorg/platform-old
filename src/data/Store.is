import .Key
    QueryKey
    IdentityKey

export type Value = Object | Array | Null
export type Observer = (value: Value) => Void
export type Unwatch = () => Void

export default abstract class Store

    abstract watch: (key: Key, observer: Observer) => Unwatch
    abstract patch: (key: IdentityKey, value) => Promise
    delete(key: IdentityKey) -> this.patch(key, null)
    get(key: Key): Promise<Value> ->
        return new Promise()
            (resolve, reject) =>
                var resolved = false
                var unobserve = null
                unobserve = this.watch(key)
                    (value) ->
                        resolved = true
                        resolve(value)
                        unobserve?()
                //  if we already resolved synchronously then unobserve now
                //  because we couldn't have unobserved during the call
                if resolved
                    unobserve()
