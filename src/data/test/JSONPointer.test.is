import "assert"
    strict as assert
import ..JSONPointer
    get
    set
    parse
    patch
    stringify

let doc = {}
    name: "Kris"
    children: []
        { name: "Sadera", birth: 1996 }
        { name: "Orion",  birth: 1998 }

let doc2 = {}
    "foo": ["bar", "baz"]
    "": 0
    "a/b": 1
    "c%d": 2
    "e^f": 3
    "g|h": 4
    "i\\j": 5
    "k\"l": 6
    " ": 7
    "m~n": 8

assert.deepEqual(get(doc, []), doc)
assert.deepEqual(get(doc, parse("")), doc)
assert.deepEqual(get(doc, ["children", 0]), doc.children[0])
assert.deepEqual(get(doc, ["children", 1]), doc.children[1])
assert.deepEqual(get(doc, parse("children/0")), doc.children[0])
assert.deepEqual(get(doc, parse("children/1")), doc.children[1])

assert.deepEqual(get(doc2, parse("")), doc2)
assert.deepEqual(get(doc2, parse("/foo")), ["bar", "baz"])
assert.deepEqual(get(doc2, parse("/foo/0")), "bar")
assert.deepEqual(get(doc2, parse("/")), 0)
assert.deepEqual(get(doc2, parse("/a~1b")), 1)
assert.deepEqual(get(doc2, parse("/c%d")), 2)
assert.deepEqual(get(doc2, parse("/e^f")), 3)
assert.deepEqual(get(doc2, parse("/g|h")), 4)
assert.deepEqual(get(doc2, parse("/i\\j")), 5)
assert.deepEqual(get(doc2, parse("/k\"l")), 6)
assert.deepEqual(get(doc2, parse("/ ")), 7)
assert.deepEqual(get(doc2, parse("/m~0n")), 8)

assert.deepEqual(stringify(["/", "~"]), "/~1/~0")

//  test setting values
assert.deepEqual(set({ foo: { bar: 12 }}, parse("/foo/bar"), 45), { foo: { bar: 45 } })
//  test patching values
assert.deepEqual(patch({ foo: { bar: 12 }}, parse("/foo/bar"), 45), { foo: { bar: 45 } })
